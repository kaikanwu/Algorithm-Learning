package leetcode;

/**
 *  Q:  不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。
 *
 *  A:  看到题目，就应该想到是位运算。
 *      整数的加减：1. 先把整数看做是二进制来操作，这里以 9 和 11 举例
 *                  9： 1001； 11：1011
 *                  1001
 *                + 1011
 *               --------
 *                 10100 = 20(10进制)
 *                2. 从举例中分析，二进制的加减可以分为两步：1.对位的相加 2.进位
 *                3. 1. 对位的相加 -> ^ 亦或操作
 *                   2. 进位      -> & 与操作，但是由于是进位，所以要向左移一位
 *
 *                   1001       1001
 *                 ^ 1011     & 1011
 *                 -------      ----
 *                   0010       1001 需要左移 -> 10010
 *                   这时候如果两个数相加： 0010+10010 = 10100 = 20。
 *
 *                4. 从上面的验证可以看出，对两个数进行 ^ 和 &（+左移）操作不会影响两数之和，由于我们题目规定不能使用加号，
 *                   所以我们需要重复这个过程，直到第二个数变成0（因为不断左移，会在右侧补0），那时第一个数就是我们所求的和。
 *
 * @author kaikanwu
 * @date 11/01/2019
 */
public class Q371_SumOfTwoIntegers {

    /**
     * 方法一：迭代
     * Time: O(m)，m =a+b
     * Space: O(1)
     */
    public int getSum(int a, int b) {

        while (b != 0) {
            // a ^ b， 是亦或操作：两个值相同，结果为0；两个值不同，结果为1
            int sum = a ^ b;
            // & ，是与操作：两个值都为1，结果为1，否则都是0；
            int carry = (a&b)<<1;
            a = sum;
            b = carry;
        }
        return a;
    }

    /**
     * 方法二：递归
     * TODO:递归求时间复杂度还没很懂，需要花时间看
     */
    public int getSum1(int a, int b) {
        return b==0? a:getSum1(a^b, (a&b)<<1);
    }
}
